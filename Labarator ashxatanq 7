#include <iostream> 
#include <vector> 
#include <string> 
#include <sstream> 
using namespace std;

class MatrixEncoder {
private:
    vector<vector<char>> matrix;   
    string sentence;  
    int rows;   

public:
    // Constructor 
    MatrixEncoder(const string& inputSentence, int numRows) : sentence(inputSentence), rows(numRows) {
        createMatrix();
    }

    void createMatrix() {
        int len = sentence.length();
        int cols = (len + rows - 1) / rows;  
        matrix = vector<vector<char>>(rows, vector<char>(cols, ' '));  
        int index = 0;
        for (int j = 0; j < cols && index < len; ++j) {
            for (int i = 0; i < rows && index < len; ++i) {
                matrix[i][j] = sentence[index++];
            }
        }
    }


    void displayMatrix() {
        for (const vector<char>& row : matrix) {
            for (char elem : row) {
                cout << elem << " ";
            }
            cout << endl;
        }
    }


    string encodeSentence() {
        string encoded;
        for (const vector<char>& row : matrix) {
            for (char elem : row) {
                encoded += elem;
            }
        }
        return encoded;
    }


    string encode(const string& input) {
        ostringstream encoded;
        int n = input.size();

        for (int i = 0; i < n; i++) {
            int count = 1;
            while (i + 1 < n && input[i] == input[i + 1]) {
                count++;
                i++;
            }
            encoded << input[i] << count;
        }
        return encoded.str();
    }
};

int main() {
    string sentence;
    int rows;

    cout << "Enter the sentence: ";
    getline(cin, sentence);
    cout << "Enter number of rows: ";
    cin >> rows;

    MatrixEncoder encoder(sentence, rows);
    cout << "Matrix:" << endl;
    encoder.displayMatrix();

    string encodedSentence = encoder.encodeSentence();
    cout << "Encoded sentence from matrix: " << encodedSentence << endl;

    string rleEncodedSentence = encoder.encode(encodedSentence);
    cout << "RLE encoded sentence: " << rleEncodedSentence << endl;

    return 0;
}
